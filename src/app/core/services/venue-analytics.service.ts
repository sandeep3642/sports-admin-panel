import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface VenueData {
  venueName: string;
  venueDescription?: string;
  contactPersonName: {
    // ‚úÖ ‡§Ö‡§¨ ‡§Ø‡•á object ‡§π‡•à (name & phone ‡§ï‡•á ‡§∏‡§æ‡§•)
    name: string;
    phone: string;
  };
  phoneNumber?: string; // (optional ‡§∞‡§ñ‡§æ ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§ä‡§™‡§∞ ‡§µ‡§æ‡§≤‡§æ object ‡§π‡•à)
  streetAddress?: string;
  city?: string;
  state?: string;
  postalCode?: string;
  openTime?: string;
  closeTime?: string;
  venueCapacity?: number;
  latitude?: number;
  longitude?: number;
  sportCategories: string[];
  availableServices: string[];
  images: { name: string; url: string }[];
  location?: {
    lat: number;
    lng: number;
    address: string;
  };
  address?: {
    line1: string;
    area: string;
    city: string;
    state: string;
    pincode: string;
    full: string;
  };
}

@Injectable({
  providedIn: 'root',
})
export class VenueAnalyticsService {
  private baseUrl = 'https://itop-admin.servebeer.com/api/admin';

  constructor(private http: HttpClient) {}

  /** üìä Venue Analytics */
  getVenueAnalytics(filters: any): Observable<any> {
    const url = `${this.baseUrl}/venue/analytics`;
    return this.http.post<any>(url, filters, {
      headers: {
        Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiZW1haWwiOiJKb25kb2VAdGVzdC5jb20iLCJpYXQiOjE3NTQwMzE0MTcsImV4cCI6MTc1NDYzNjIxN30.2TN4cUgBnz3qWJascxWKDwEPNhNVlgNtESondTADil4`, // ‚úÖ token env ‡§∏‡•á manage ‡§ï‡§∞
      },
    });
  }

  /** üèü Create Venue API */
  createVenue(venueData: VenueData): Observable<any> {
    console.log('‚úÖ venueData (from component):', venueData);

    // üöÄ ‡§Ö‡§¨ payload ‡§ï‡•ã component ‡§ú‡•à‡§∏‡§æ ‡§π‡•Ä use ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á
    const payload = {
      name: venueData.venueName,
      descriptions: venueData.venueDescription,
      address: venueData.address, // ‚úÖ Direct component ‡§∏‡•á ‡§≤‡§ø‡§Ø‡§æ
      capacity: venueData.venueCapacity,
      food_court: true, // ‡§´‡§ø‡§≤‡§π‡§æ‡§≤ true ‡§∞‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
      open_status: {
        is_open: true,
        open_time: venueData.openTime,
        close_time: venueData.closeTime,
      },
      location: venueData.location,
      contact_person: venueData.contactPersonName, // ‚úÖ Direct ‡§≤‡§ø‡§Ø‡§æ (name & phone)
      sport_type: venueData.sportCategories,
      available_services: venueData.availableServices,
      images: venueData.images.map((img, i) => ({
        id: i + 1,
        name: img.name,
        url: img.url,
      })),
    };

    console.log('üì§ Final Payload:', payload);
    return this.http.post(`${this.baseUrl}/venue/create`, payload, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken')}`, // ‚úÖ token env ‡§∏‡•á manage ‡§ï‡§∞
      },
    });
  }

  /** üì§ Bulk Image Upload */
  bulkUploadImages(images: File[]): Observable<any> {
    const formData = new FormData();
    images.forEach((file) => {
      formData.append('files', file);
    });

    formData.append('category', 'grant');
    formData.append('title', 'abc-title');

    return this.http.post('https://itop-admin.servebeer.com/api/admin/file/bulkUploadFiles', formData, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken')}`, // ‚úÖ token env ‡§∏‡•á manage ‡§ï‡§∞
      },
    });
  }

  getVenues(filters: any): Observable<any> {
    const url = `${this.baseUrl}/venue/getAll`;
    return this.http.post<any>(url, filters, {
      headers: {
        Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiZW1haWwiOiJKb25kb2VAdGVzdC5jb20iLCJpYXQiOjE3NTQwMzE0MTcsImV4cCI6MTc1NDYzNjIxN30.2TN4cUgBnz3qWJascxWKDwEPNhNVlgNtESondTADil4`, // ‚úÖ token env ‡§∏‡•á manage ‡§ï‡§∞
      },
    });
  }
}
